// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// predictor_lookup
int predictor_lookup(const IntegerVector x);
RcppExport SEXP _datafsm_predictor_lookup(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(predictor_lookup(x));
    return rcpp_result_gen;
END_RCPP
}
// fitnessCPP
IntegerVector fitnessCPP(const IntegerVector action_vec, const IntegerMatrix state_mat, const IntegerMatrix covariates, const IntegerVector period);
RcppExport SEXP _datafsm_fitnessCPP(SEXP action_vecSEXP, SEXP state_matSEXP, SEXP covariatesSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector >::type action_vec(action_vecSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type state_mat(state_matSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type period(periodSEXP);
    rcpp_result_gen = Rcpp::wrap(fitnessCPP(action_vec, state_mat, covariates, period));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_datafsm_predictor_lookup", (DL_FUNC) &_datafsm_predictor_lookup, 1},
    {"_datafsm_fitnessCPP", (DL_FUNC) &_datafsm_fitnessCPP, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_datafsm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
